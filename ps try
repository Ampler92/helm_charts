You're right; the -Stream parameter I mentioned does not exist for Invoke-RestMethod or Invoke-WebRequest in PowerShell. My mistake there. For continuously streaming data like logs from a pod via the Kubernetes API, the direct approach in PowerShell is more complex due to this limitation.A workaround is to call curl from PowerShell, as curl (or Invoke-WebRequest in PowerShell Core/PowerShell 7, where it's an alias to curl) supports streaming. Here's how you can adapt the previous example to use curl in PowerShell for streaming logs:Using curl in PowerShell for Streaming Logs# Variables
$apiServer = "https://<your-kubernetes-api-server>"
$namespace = "your-namespace"
$podName = "your-pod-name"
$token = "your-bearer-token"

# Kubernetes API endpoint for pod logs
$logUrl = "$apiServer/api/v1/namespaces/$namespace/pods/$podName/log?follow=true"

# Command to stream logs using curl
$curlCommand = "curl --header `"Authorization: Bearer $token`" -k $logUrl"

# Execute the curl command
Invoke-Expression $curlCommand
Important NotesAuthentication: Replace <your-kubernetes-api-server>, your-namespace, your-pod-name, and your-bearer-token with your actual Kubernetes API server address, namespace, pod name, and a valid Bearer token.Security: The -k option in the curl command disables SSL certificate verification. This is generally not recommended in production environments. It's used here for simplicity and should be replaced with proper certificate verification in secure setups.PowerShell Core/PowerShell 7: If you are using PowerShell Core or PowerShell 7, curl is an alias for Invoke-WebRequest. In these versions, you might prefer using the native Invoke-WebRequest cmdlet with its native syntax for consistency with PowerShell scripting practices.Streaming Limitation: PowerShell's native cmdlets (Invoke-WebRequest and Invoke-RestMethod) prior to PowerShell 7 do not directly support streaming the response body from a continuously open HTTP connection. Using external tools like curl can be a workaround for such scenarios.This workaround leverages external command-line tools to achieve functionality not directly supported by PowerShell's native cmdlets in versions prior to PowerShell 7. It's a practical approach to stream logs or other continuous data from web APIs within PowerShell scripts.